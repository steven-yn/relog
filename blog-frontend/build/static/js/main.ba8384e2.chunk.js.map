{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/common/LikeButton.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/admin/ReqList.js","containers/admin/ReqListContainer.js","pages/AdminPage.js","components/common/MainMenu.js","components/common/MainPage.js","pages/MainPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","NavWrap","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","Navbar","bg","variant","Container","Nav","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","permitUserList","useState","permit","setPermit","checkPermit","find","rtrn","useEffect","length","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","match","auth","userList","readUser","permitUser","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","style","marginBottom","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","READ_USER","READ_USER_SUCCESS","READ_USER_FAILURE","PERMIT_USER","changeField","form","key","value","initializeForm","register","password","login","permitted","registerSaga","loginSaga","readUserSaga","initialState","passwordConfirm","authError","produce","draft","push","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","ButtonReal","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","nickname","phone","alert","marginTop","history","setError","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","LikeButton","isChecked","notice","setState","Fragment","this","HeartFilled","HeartOutlined","Component","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","alignItems","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","postId","delete","ownPost","PostPage","UserTable","UserList","RequestPermitButton","ReqListBlock","ReqItemBlock","UserItem","onPermit","ReqList","AdminPage","MainMenu","MainPages","MainPage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba8384e2.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529'\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285'\n  ]\n};\n\nexport default palette;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n\n  ${(props) =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n\n  ${(props) =>\n    props.cyan &&\n    css`\n      background: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = (props) => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport Responsive from './Responsive';\nimport Button from './Button';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 9rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  overflow: hidden;\n  .right {\n    display: flex;\n    align-items: center;\n  }\n\n  .rightlast {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 0.5rem;\n  }\n\n  .logo {\n    font-size: 1.7rem;\n    font-weight: 750;\n    letter-spacing: 2px;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst NavWrap = styled(Responsive)`\n  height: 2rem;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: flex-start;\n  margin-bottom: 1rem;\n\n  .nav {\n    border-right: 2px solid;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n  }\n\n  .navlast {\n    padding-left: 1rem;\n    padding-right: 1rem;\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 11rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n  margin-top: 0.2rem;\n`;\n\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            Relog\n          </Link>\n          {user ? (\n            user.username === 'admin' ? (\n              <div>\n                <div className=\"right\">\n                  <UserInfo>{user.username}</UserInfo>\n                  <Button onClick={onLogout}>로그아웃</Button>\n                </div>\n                <div className=\"rightlast\">\n                  <Button to=\"/admin\">관리자 페이지</Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"right\">\n                <UserInfo>{user.username}</UserInfo>\n                <Button onClick={onLogout}>로그아웃</Button>\n              </div>\n            )\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n        <NavWrap>\n          <Navbar bg=\"#ffffff\" variant=\"light\">\n            <Container>\n              <Nav className=\"me-auto\">\n                <Link className=\"nav\" to=\"/\">\n                  포스트\n                </Link>\n                <Link className=\"nav\" to={'/@admin/'}>\n                  공지사항\n                </Link>\n                <Link className=\"navlast\" to=\"/home\">\n                  사이트\n                </Link>\n              </Nav>\n            </Container>\n          </Navbar>\n        </NavWrap>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","/****************************************\n// Description : Admin RestAPI <=> axios\n// Vision : V1.0.0\n// Filename : auth.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n\nexport const readUser = () => client.get('/api/auth/readUser');\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = (type) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: state => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoBlock = styled.div`\n  ${props =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map(tag => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","/****************************************\n// Description : Permitted PostList UI Component\n// Vision : V1.1.1\n// Filename : PostList.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 10rem;\n  margin-bottom: 2rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({\n  posts,\n  loading,\n  error,\n  showWriteButton,\n  permitUserList,\n}) => {\n  const [permit, setPermit] = useState(false);\n\n  const checkPermit =\n    showWriteButton &&\n    permitUserList.find((rtrn) => rtrn.username === showWriteButton.username);\n\n  useEffect(() => {\n    checkPermit ? setPermit(true) : setPermit(false);\n    return;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [[], permitUserList]);\n\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n\n  return (\n    permitUserList[permitUserList.length - 1]?.username && (\n      <PostListBlock>\n        <WritePostButtonWrapper>\n          {permit && showWriteButton && (\n            <Button cyan to=\"/write\">\n              새 글 작성하기\n            </Button>\n          )}\n        </WritePostButtonWrapper>\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n        {!loading && posts && (\n          <div>\n            {posts.map((post) => (\n              <PostItem post={post} key={post._id} />\n            ))}\n          </div>\n        )}\n        {!loading && posts && (\n          <div>\n            {posts.map((post) => (\n              <noticeItem post={post} key={post._id} />\n            ))}\n          </div>\n        )}\n      </PostListBlock>\n    )\n  );\n};\n\nexport default PostList;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\n  createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({ tag, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import qs from 'qs';\nimport client from './client';\n\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tag }) => {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\n","/****************************************\n// Description : Permitted PostListContainer Component\n// Vision : V1.1.1\n// Filename : PostListContainer.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\n\nconst PostListContainer = ({ location, match }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user, permitUserList } = useSelector(\n    ({ posts, loading, user, auth }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n      userList: auth.readUser,\n      permitUserList: auth.permitUser,\n    }),\n  );\n  useEffect(() => {\n    const { username } = match.params;\n    const { tag, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search, match.params]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n      permitUserList={permitUserList}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        style={{ marginBottom: '3rem' }}\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        style={{ marginBottom: '3rem' }}\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from '../../components/posts/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location, match }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!posts || loading) return null;\n\n  const { username } = match.params;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\n\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostListContainer from '../containers/posts/PostListContainer';\nimport PaginationContainer from '../containers/posts/PaginationContainer';\n\nconst PostListPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContainer />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\n/**\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\n */\n\n/* 화면 전체를 채움 */\nconst AuthTemplateBlock = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  /* flex로 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/* 흰색 박스 */\nconst WhiteBox = styled.div`\n  .logo-area {\n    font-size: 2rem;\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 10px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\n  padding: 2rem;\n  width: 360px;\n\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateBlock>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">Relog</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateBlock>\n  );\n};\n\nexport default AuthTemplate;\n","/****************************************\n// Description : Admin Redux Component\n// Vision : V1.1.1\n// Filename : auth.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\n  createRequestActionTypes('auth/REGISTER');\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\n  createRequestActionTypes('auth/LOGIN');\n\nconst [READ_USER, READ_USER_SUCCESS, READ_USER_FAILURE] =\n  createRequestActionTypes('auth/READ_USER');\n\nconst [PERMIT_USER] = createRequestActionTypes('auth/PERMIT_USER');\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, // register , login\n    key, // username, password, passwordConfirm\n    value, // 실제 바꾸려는 값\n  }),\n);\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password,\n}));\nexport const readUser = createAction(READ_USER);\nexport const permitUser = createAction(PERMIT_USER, (permitted) => ({\n  username: permitted,\n}));\n\n// saga 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nconst readUserSaga = createRequestSaga(READ_USER, authAPI.readUser);\n\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(READ_USER, readUserSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n  readUser: {\n    userList: null,\n    error: null,\n  },\n  permitUser: [\n    {\n      username: 'admin',\n    },\n  ],\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, (draft) => {\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\n      }),\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\n    }),\n    // 회원가입 성공\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    // 회원가입 실패\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    // 로그인 성공\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth,\n    }),\n    // 로그인 실패\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [READ_USER_SUCCESS]: (state, { payload: readUser }) => ({\n      ...state,\n      readUser,\n    }),\n    [READ_USER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [PERMIT_USER]: (state, { payload: permitUser }) =>\n      produce(state, (draft) => {\n        draft.permitUser.push(permitUser);\n      }),\n  },\n  initialState,\n);\n\nexport default auth;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport palette from '../../lib/styles/palette';\nimport ButtonReal from '../common/Button';\n\n/**\n * 회원가입 또는 로그인 폼을 보여줍니다.\n */\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    margin: 0;\n    color: ${palette.gray[8]};\n    margin-bottom: 3rem;\n    width: 100%;\n    font-size: 2rem;\n    text-align: center;\n  }\n`;\n\n/**\n * 스타일링된 input\n */\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  border: none;\n  text-align: center;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding: 1rem 0 1rem 0;\n  margin-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal-7;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 0.5rem;\n  }\n`;\n\n/**\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\n */\nconst Footer = styled.div`\n  margin-top: 3rem;\n  text-align: right;\n  font-size: 1.1rem;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    &:hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWithMarginTop = styled(ButtonReal)`\n  margin-top: 1rem;\n`;\n\nconst textMap = {\n  login: '로그인',\n  register: '회원가입',\n};\n\n/**\n * 에러를 보여줍니다\n */\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form onSubmit={onSubmit}>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          />\n        )}\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"nickname\"\n            name=\"nickname\"\n            placeholder=\"닉네임\"\n            onChange={onChange}\n            value={form.nickname}\n          />\n        )}\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"phonenumber\"\n            name=\"phone\"\n            placeholder=\"휴대 전화\"\n            onChange={onChange}\n            value={form.phone}\n          />\n        )}\n        {type === 'register' && (\n          <Button\n            variant=\"outlined\"\n            onClick={() => alert('휴대 전화 인증 알림입니다')}\n          >\n            인증하기\n          </Button>\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\n          {text}\n        </ButtonWithMarginTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\n\nconst LoginForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'login',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password} = form;\n    dispatch(login({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      console.log('오류 발생');\n      console.log(authError);\n      setError('로그인 실패');\n      return;\n    }\n    if (auth) {\n      console.log('로그인 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(LoginForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    // 하나라도 비어있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타 이유\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\nimport Quill from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorBlock = styled(Responsive)`\n  /* 페이지 위 아래 여백 지정 */\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\n\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\nconst QuillWrapper = styled.div`\n  /* 최소 크기 지정 및 padding 제거 */\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        // 더 많은 옵션\n        // https://quilljs.com/docs/modules/toolbar/ 참고\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n\n  const onChangeTitle = (e) => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] =\n  createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] =\n  createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({\n    id,\n    title,\n    body,\n    tags,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from 'react';\nimport Editor from '../../components/write/Editor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n\n  // Quill 에디터 의 값이 바뀔때 스토어에 값을 넣는 작업.\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n\n  // Editor 컴포넌트의 useEffect 를 위한 함수\n  // 컴포넌트가 화면에 나타났을때 한번만 실행되도록 함.\n  const onChangeField = useCallback(\n    (payload) => dispatch(changeField(payload)),\n    [dispatch],\n  );\n\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]};\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 300px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\nconst TagItem = React.memo(({ tag, onRemove }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>\n    {tags.map((tag) => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\n    ))}\n  </TagListBlock>\n));\n\n//\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    (tag) => {\n      if (!tag) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    (tag) => {\n      const nextTags = localTags.filter((t) => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback((e) => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const tags = useSelector((state) => state.write.tags);\n\n  const onChangeTags = (nextTags) => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n      return;\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import { Helmet } from 'react-helmet-async';\nimport Responsive from '../components/common/Responsive';\nimport EditorContainer from '../containers/write/EditorContainer';\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\n\nconst WritePage = () => {\n  return (\n    <Responsive>\n      <Helmet>\n        <title>글 작성하기</title>\n      </Helmet>\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] =\n  createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, (id) => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n\n    // 깜박임 현상 방지.\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n","import React from 'react';\nimport {HeartOutlined, HeartFilled} from '@ant-design/icons';\nimport './style.css'\nclass LikeButton extends React.Component{\n    state = {\n        isChecked: false,\n        notice: ' ',\n    };\n\n    onClick = () => {\t\t\t\t//버튼을 누를때마다\n        this.state.isChecked ?\t\t//isChecked가 True면(하트를 빨간색에서 검은색으로)\n        this.setState({\n            isChecked: false,\t\t//isChecked를 false로 초기화\n            notice: '',\t\t\t\t//알림은 안뜨게 만듬\n        })\n        :\n        this.setState({\t\t\t\t//isChecked가 false면(하트를 검은색에서 빨간색으로\n            isChecked: true,\t\t//isChecked를 true로 초기화\n            notice: '1',\t//알림이 나오게 설정\n        });\n    }\n    render(){\n        return(\n            <React.Fragment>\n            <div className=\"icons-list\">\n                {this.state.isChecked ?  \n                <HeartFilled className=\"button red\" onClick={this.onClick}/> :\n                <HeartOutlined className=\"button\" onClick={this.onClick}/>}\n                <h3>{this.state.notice}</h3>\n            </div>\n        </React.Fragment>\n        )\n    }\n}\nexport default LikeButton;","import { Helmet } from 'react-helmet-async';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport LikeButton from '../common/LikeButton';\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 10rem;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\n  // 에러 발생 시\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n  }\n\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} - Relog</title>\n      </Helmet>\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n      <LikeButton style={{ alignItems: 'center' }} />\n      {actionButtons}\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </PostActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport const Counter = () => {\n  const [number, setNumber] = useState(0);\n\n  const increaseNumber = () => { // number의 값을 증가시키는 함수\n    setNumber(number + 1);\n\n  };\n  return (\n    <div>\n      <h1>{number}</h1>\n      <button onClick={increaseNumber}></button>&nbsp;\n    </div>\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","/****************************************\n// Description : Admin UI Component\n// Vision : V1.1.1\n// Filename : ReqList.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport Button from '../common/Button';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n// import palette from '../../lib/styles/palette';\n// import SubInfo from '../common/SubInfo';\n\nconst UserTable = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: row;\n  h2 {\n    margin-top: 2rem;\n  }\n`;\n\nconst UserList = styled.div`\n  display: inline-flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  width: 50%;\n`;\n\nconst RequestPermitButton = styled.div`\n  display: inline-flex;\n  justify-content: flex-end;\n  width: 50%;\n`;\n\nconst ReqListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst ReqItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  width: 100%;\n  border-bottom: 2px solid;\n`;\n\n/*\nconst ReqItem = ({ users }) => {\n  const { user } = users;\n  return (\n    <ReqItemBlock>\n      <SubInfo username={user.username} userid={user._id} />\n    </ReqItemBlock>\n  );\n};\n*/\n\nconst UserItem = ({ userList, onPermit, permitUserList }) => {\n  const [permit, setPermit] = useState(false);\n  const onClick = () => {\n    onPermit(userList.username);\n  };\n\n  const checkPermit = permitUserList.find(\n    (rtrn) => rtrn.username === userList.username,\n  );\n  //\n  useEffect(() => {\n    checkPermit ? setPermit(true) : setPermit(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onClick]);\n\n  return (\n    <ReqItemBlock>\n      <UserList>\n        유저이름 : {userList.username}\n        <br />\n        아이디 : {userList._id}\n        <br />\n      </UserList>\n      <RequestPermitButton>\n        <Button onClick={onClick} cyan>\n          {permit ? '승인됨' : '승인대기중'}\n        </Button>\n      </RequestPermitButton>\n    </ReqItemBlock>\n  );\n};\n\nconst ReqList = ({ readUser, onPermit, permitUserList }) => {\n  return (\n    <ReqListBlock>\n      <UserTable>\n        <h2>유저정보</h2>\n      </UserTable>\n\n      {readUser[0]?.username &&\n      permitUserList[permitUserList.length - 1]?.username &&\n      'admin' ? (\n        <div>\n          {readUser.map((userList) => (\n            <UserItem\n              key={userList._id}\n              userList={userList}\n              onPermit={onPermit}\n              permitUserList={permitUserList}\n            />\n          ))}\n        </div>\n      ) : (\n        <h1> 유저항목을 불러오지 못했습니다. </h1>\n      )}\n    </ReqListBlock>\n  );\n};\n\nexport default ReqList;\n","/****************************************\n// Description : Admin Container Component\n// Vision : V1.1.1\n// Filename : ReqListContainer.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport { withRouter } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { readUser, permitUser } from '../../modules/auth';\nimport ReqList from '../../components/admin/ReqList';\nimport { useEffect } from 'react';\n\nconst ReqListContainer = () => {\n  const dispatch = useDispatch();\n  const { userList, loading, permitUserList } = useSelector(\n    ({ auth, loading }) => ({\n      userList: auth.readUser,\n      loading: loading['auth/READ_USER'],\n      permitUserList: auth.permitUser,\n    }),\n  );\n\n  const onPermit = (permitted) => {\n    dispatch(permitUser(permitted));\n  };\n\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  useEffect(() => {\n    dispatch(readUser());\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n\n    return;\n  }, [dispatch]);\n\n  return (\n    <ReqList\n      loading={loading}\n      readUser={userList}\n      onPermit={onPermit}\n      permitUserList={permitUserList}\n    />\n  );\n};\n\nexport default withRouter(ReqListContainer);\n\n/*\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n   () => {\n      dispatch(unloadPost());\n    };\n*/\n","/****************************************\n// Description : Admin Page Routing\n// Vision : V1.0.0\n// Filename : Adminpage.js\n// Copyright 2021, Sung Yeon Yoon\n// Email: steven_yoon1009@naver.com\n* ****************************************/\n\nimport React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport ReqListContainer from '../containers/admin/ReqListContainer';\n\nconst AdminPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <ReqListContainer />\n    </>\n  );\n};\n\nexport default AdminPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Responsive from './Responsive';\nimport Button from './Button';\n\nconst HeaderBlock = styled.div`\n  position: flex;\n  width: 100%;\n  z-index: 6;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 5rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.7rem;\n    font-weight: 750;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst MainMenu = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            Relog\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default MainMenu;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst MainPages = styled.div`\n.bg{\n  position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n        to right,\n        rgba(20, 20, 20, 0.1) 10%,\n        rgba(20, 20, 20, 0.7) 70%,\n        rgba(20, 20, 20, 1)\n      ),\n      url(https://source.unsplash.com/random/1920x1080);\n    background-size: cover;\n    z-index: 3;\n  }\n  .total{\n    display: flex;\n    align-items:center;\n    justify-content: center;\n    height: 100vh;\n  }\n  .menu{\n    list-style:none;\n    text-align: center;\n    color: white;\n    -webkit-text-stroke: 1px black;\n    font-size: 1.5rem;\n    border: 1px solid #f5f5f5;\n    width: 16rem;\n    height: 6rem;\n    padding: 2rem;\n    margin: 3rem;\n    z-index: 4;\n  }\n`;\n\nexport const MainPage = () => {\n  return(\n    <>\n      <MainPages>\n        <div className = \"bg\">\n          <ol className = \"total\">\n            <li className = \"menu\"><Link to =  \"/\">포스트</Link></li>\n            <li className = \"menu\"><Link to = '/@admin/'>공지사항</Link></li>\n            <li className = \"menu\"><Link to =  \"/home\">사이트</Link></li>\n          </ol>\n        </div>\n      </MainPages>\n    </>\n  )\n};\n","import React from 'react';\nimport MainMenu from '../components/common/MainMenu';\nimport {MainPage} from '../components/common/MainPage'\n\nconst MainPages = () => {\n  return (\n      \n    <MainPage>\n        <MainMenu />\n    </MainPage>\n    \n  );\n};\n\nexport default MainPages;\n","import { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\nimport AdminPage from './pages/AdminPage';\nimport MainPages from './pages/MainPage';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Relog</title>\n      </Helmet>\n      <Route component={MainPages} path=\"/home\" />\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n      <Route component={AdminPage} path=\"/admin\" />\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}