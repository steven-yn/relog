{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/common/LikeButton.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/admin/ReqList.js","containers/admin/ReqListContainer.js","pages/AdminPage.js","components/common/MainMenu.js","components/common/MainPage.js","pages/MainPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","Navbar","bg","variant","style","marginTop","Container","Brand","href","marginRight","marginBottom","Nav","username","onClick","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","permitUserList","useState","permit","setPermit","checkPermit","find","rtrn","useEffect","length","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","match","auth","userList","readUser","permitUser","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","READ_USER","READ_USER_SUCCESS","READ_USER_FAILURE","PERMIT_USER","changeField","form","key","value","initializeForm","register","password","login","permitted","registerSaga","loginSaga","readUserSaga","initialState","passwordConfirm","authError","produce","draft","push","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","ButtonReal","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","nickname","phone","alert","history","setError","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","LikeButton","isChecked","notice","setState","Fragment","this","HeartFilled","HeartOutlined","Component","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","alignItems","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","postId","a","delete","ownPost","PostPage","DummyBlock","UserTable","UserList","RequestPermitButton","ReqListBlock","ReqItemBlock","UserItem","onPermit","ReqList","AdminPage","MainMenu","MainPages","MainPage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b9ddd5f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529'\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285'\n  ]\n};\n\nexport default palette;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n\n  ${(props) =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n\n  ${(props) =>\n    props.cyan &&\n    css`\n      background: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = (props) => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Navbar, Nav, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 11rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\r\n  overflow: hidden;\r\n  .logo {\r\n    font-size: 1.7rem;\r\n    font-weight: 750;\r\n    letter-spacing: 2px;\r\n    position: absolute;\r\n    margin-bottom: 1rem;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    position: absolute;\r\n    margin-left: 51rem;\r\n  }\r\n  .left {\r\n    display: flex;\r\n    position: absolute;\r\n    margin-left: 35rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 3rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n  margin-top: 0.2rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            YXMPORTFOLIO\r\n          </Link>\r\n          <Navbar bg=\"#ffffff\" variant=\"light\" style={{ marginTop: '8rem' }}>\r\n            <Container>\r\n              <Navbar.Brand\r\n                href=\"/\"\r\n                style={{ marginRight: '2rem', marginBottom: '1rem' }}\r\n              >\r\n                포스트\r\n              </Navbar.Brand>\r\n              <Nav className=\"me-auto\">\r\n                <Nav.Link\r\n                  href={'/@admin/'}\r\n                  style={{ marginRight: '2rem', marginBottom: '1rem' }}\r\n                >\r\n                  공지사항\r\n                </Nav.Link>\r\n                <Nav.Link href=\"/home\">사이트</Nav.Link>\r\n              </Nav>\r\n            </Container>\r\n          </Navbar>\r\n          {user ? (\r\n            user.username === 'admin' ? (\r\n              <div className=\"right\">\r\n                <UserInfo>{user.username}</UserInfo>\r\n                <Button to=\"/admin\">관리자 페이지</Button>\r\n                <Button onClick={onLogout}>로그아웃</Button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"right\">\r\n                <UserInfo>{user.username}</UserInfo>\r\n                <Button onClick={onLogout}>로그아웃</Button>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n\nexport const readUser = () => client.get('/api/auth/readUser');\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = (type) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: state => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoBlock = styled.div`\n  ${props =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map(tag => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 10rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0.5rem;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={tags} />\r\n      <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({\r\n  posts,\r\n  loading,\r\n  error,\r\n  showWriteButton,\r\n  permitUserList,\r\n}) => {\r\n  const [permit, setPermit] = useState(false);\r\n\r\n  const checkPermit =\r\n    showWriteButton &&\r\n    permitUserList.find((rtrn) => rtrn.username === showWriteButton.username);\r\n\r\n  useEffect(() => {\r\n    checkPermit ? setPermit(true) : setPermit(false);\r\n    return;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [[], permitUserList]);\r\n\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n\r\n  return (\r\n    permitUserList[permitUserList.length - 1]?.username && (\r\n      <PostListBlock>\r\n        <WritePostButtonWrapper>\r\n          {permit && showWriteButton && (\r\n            <Button cyan to=\"/write\">\r\n              새 글 작성하기\r\n            </Button>\r\n          )}\r\n        </WritePostButtonWrapper>\r\n        {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n        {!loading && posts && (\r\n          <div>\r\n            {posts.map((post) => (\r\n              <PostItem post={post} key={post._id} />\r\n            ))}\r\n          </div>\r\n        )}\r\n        {!loading && posts && (\r\n          <div>\r\n            {posts.map((post) => (\r\n              <noticeItem post={post} key={post._id} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </PostListBlock>\r\n    )\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\r\n  createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;\r\n","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user, permitUserList } = useSelector(\r\n    ({ posts, loading, user, auth }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n      userList: auth.readUser,\r\n      permitUserList: auth.permitUser,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const { username } = match.params;\r\n    const { tag, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search, match.params]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user}\r\n      permitUserList={permitUserList}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        style={{ marginBottom: '3rem' }}\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        style={{ marginBottom: '3rem' }}\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  const { username } = match.params;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n/* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  /* flex로 내부 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    font-size: 2rem;\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 10px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">YXMPORTFOLIO</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n  createRequestActionTypes('auth/REGISTER');\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n  createRequestActionTypes('auth/LOGIN');\r\n\r\nconst [READ_USER, READ_USER_SUCCESS, READ_USER_FAILURE] =\r\n  createRequestActionTypes('auth/READ_USER');\r\n\r\nconst [PERMIT_USER] = createRequestActionTypes('auth/PERMIT_USER');\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const readUser = createAction(READ_USER);\r\nexport const permitUser = createAction(PERMIT_USER, (permitted) => ({\r\n  username: permitted,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nconst readUserSaga = createRequestSaga(READ_USER, authAPI.readUser);\r\n\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n  yield takeLatest(READ_USER, readUserSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n  readUser: {\r\n    userList: null,\r\n    error: null,\r\n  },\r\n  permitUser: [\r\n    {\r\n      username: 'admin',\r\n    },\r\n  ],\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    [READ_USER_SUCCESS]: (state, { payload: readUser }) => ({\r\n      ...state,\r\n      readUser,\r\n    }),\r\n    [READ_USER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [PERMIT_USER]: (state, { payload: permitUser }) =>\r\n      produce(state, (draft) => {\r\n        draft.permitUser.push(permitUser);\r\n      }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from '@material-ui/core';\r\nimport palette from '../../lib/styles/palette';\r\nimport ButtonReal from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 3rem;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  text-align: center;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding: 1rem 0 1rem 0;\r\n  margin-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 0.5rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n */\r\nconst Footer = styled.div`\r\n  margin-top: 3rem;\r\n  text-align: right;\r\n  font-size: 1.1rem;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(ButtonReal)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\n/**\r\n * 에러를 보여줍니다\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"nickname\"\r\n            name=\"nickname\"\r\n            placeholder=\"닉네임\"\r\n            onChange={onChange}\r\n            value={form.nickname}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"phonenumber\"\r\n            name=\"phone\"\r\n            placeholder=\"휴대 전화\"\r\n            onChange={onChange}\r\n            value={form.phone}\r\n          />\r\n        )}\r\n        {type === 'register' && (\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => alert('휴대 전화 인증 알림입니다')}\r\n          >\r\n            인증하기\r\n          </Button>\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const { username, password} = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/'); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] =\r\n  createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] =\r\n  createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Quill 에디터 의 값이 바뀔때 스토어에 값을 넣는 작업.\r\n  const { title, body } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n  }));\r\n\r\n  // Editor 컴포넌트의 useEffect 를 위한 함수\r\n  // 컴포넌트가 화면에 나타났을때 한번만 실행되도록 함.\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 300px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\n//\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const tags = useSelector((state) => state.write.tags);\r\n\r\n  const onChangeTags = (nextTags) => {\r\n    dispatch(\r\n      changeField({\r\n        key: 'tags',\r\n        value: nextTags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton cyan onClick={onPublish}>\r\n        포스트 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n      return;\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import { Helmet } from 'react-helmet-async';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>글 작성하기</title>\r\n      </Helmet>\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] =\r\n  createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n\r\n    // 깜박임 현상 방지.\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import React from 'react';\r\nimport {HeartOutlined, HeartFilled} from '@ant-design/icons';\r\nimport './style.css'\r\nclass LikeButton extends React.Component{\r\n    state = {\r\n        isChecked: false,\r\n        notice: ' ',\r\n    };\r\n\r\n    onClick = () => {\t\t\t\t//버튼을 누를때마다\r\n        this.state.isChecked ?\t\t//isChecked가 True면(하트를 빨간색에서 검은색으로)\r\n        this.setState({\r\n            isChecked: false,\t\t//isChecked를 false로 초기화\r\n            notice: '',\t\t\t\t//알림은 안뜨게 만듬\r\n        })\r\n        :\r\n        this.setState({\t\t\t\t//isChecked가 false면(하트를 검은색에서 빨간색으로\r\n            isChecked: true,\t\t//isChecked를 true로 초기화\r\n            notice: '1',\t//알림이 나오게 설정\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"icons-list\">\r\n                {this.state.isChecked ?  \r\n                <HeartFilled className=\"button red\" onClick={this.onClick}/> :\r\n                <HeartOutlined className=\"button\" onClick={this.onClick}/>}\r\n                <h3>{this.state.notice}</h3>\r\n            </div>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default LikeButton;","import { Helmet } from 'react-helmet-async';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport LikeButton from '../common/LikeButton';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 10rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <Helmet>\r\n        <title>{title} - REACTERS</title>\r\n      </Helmet>\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfo\r\n          username={user.username}\r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags} />\r\n      </PostHead>\r\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\r\n      <LikeButton style={{ alignItems: 'center' }} />\r\n      {actionButtons}\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  onConfirm,\r\n  onCancel,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"포스트 삭제\"\r\n      description=\"포스트를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton>\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        onCancel={onCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n\r\n  const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={\r\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport const Counter = () => {\r\n  const [number, setNumber] = useState(0);\r\n\r\n  const increaseNumber = () => { // number의 값을 증가시키는 함수\r\n    setNumber(number + 1);\r\n\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>{number}</h1>\r\n      <button onClick={increaseNumber}></button>&nbsp;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n// import palette from '../../lib/styles/palette';\r\n// import SubInfo from '../common/SubInfo';\r\n\r\nconst DummyBlock = styled.div`\r\n  display: flex;\r\n  height: 8rem;\r\n`;\r\n\r\nconst UserTable = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: row;\r\n  h2 {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst UserList = styled.div`\r\n  display: inline-flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  width: 50%;\r\n`;\r\n\r\nconst RequestPermitButton = styled.div`\r\n  display: inline-flex;\r\n  justify-content: flex-end;\r\n  width: 50%;\r\n`;\r\n\r\nconst ReqListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst ReqItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  width: 100%;\r\n  border-bottom: 2px solid;\r\n`;\r\n\r\n/*\r\nconst ReqItem = ({ users }) => {\r\n  const { user } = users;\r\n  return (\r\n    <ReqItemBlock>\r\n      <SubInfo username={user.username} userid={user._id} />\r\n    </ReqItemBlock>\r\n  );\r\n};\r\n*/\r\n\r\nconst UserItem = ({ userList, onPermit, permitUserList }) => {\r\n  const [permit, setPermit] = useState(false);\r\n  const onClick = () => {\r\n    onPermit(userList.username);\r\n  };\r\n\r\n  const checkPermit = permitUserList.find(\r\n    (rtrn) => rtrn.username === userList.username,\r\n  );\r\n\r\n  useEffect(() => {\r\n    checkPermit ? setPermit(true) : setPermit(false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [onClick]);\r\n\r\n  return (\r\n    <ReqItemBlock>\r\n      <UserList>\r\n        유저이름 : {userList.username}\r\n        <br />\r\n        아이디 : {userList._id}\r\n        <br />\r\n      </UserList>\r\n      <RequestPermitButton>\r\n        <Button onClick={onClick} cyan>\r\n          {permit ? '승인됨' : '승인대기중'}\r\n        </Button>\r\n      </RequestPermitButton>\r\n    </ReqItemBlock>\r\n  );\r\n};\r\n\r\nconst ReqList = ({ readUser, onPermit, permitUserList }) => {\r\n  return (\r\n    <ReqListBlock>\r\n      <DummyBlock />\r\n      <UserTable>\r\n        <h2>유저정보</h2>\r\n      </UserTable>\r\n\r\n      {readUser[0]?.username &&\r\n      permitUserList[permitUserList.length - 1]?.username &&\r\n      'admin' ? (\r\n        <div>\r\n          {readUser.map((userList) => (\r\n            <UserItem\r\n              key={userList._id}\r\n              userList={userList}\r\n              onPermit={onPermit}\r\n              permitUserList={permitUserList}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h1> 유저항목을 불러오지 못했습니다. </h1>\r\n      )}\r\n    </ReqListBlock>\r\n  );\r\n};\r\n\r\nexport default ReqList;\r\n","import { withRouter } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { readUser, permitUser } from '../../modules/auth';\r\nimport ReqList from '../../components/admin/ReqList';\r\nimport { useEffect } from 'react';\r\n\r\nconst ReqListContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { userList, loading, permitUserList } = useSelector(\r\n    ({ auth, loading }) => ({\r\n      userList: auth.readUser,\r\n      loading: loading['auth/READ_USER'],\r\n      permitUserList: auth.permitUser,\r\n    }),\r\n  );\r\n\r\n  const onPermit = (permitted) => {\r\n    dispatch(permitUser(permitted));\r\n  };\r\n\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  useEffect(() => {\r\n    dispatch(readUser());\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n\r\n    return;\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ReqList\r\n      loading={loading}\r\n      readUser={userList}\r\n      onPermit={onPermit}\r\n      permitUserList={permitUserList}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(ReqListContainer);\r\n\r\n/*\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n   () => {\r\n      dispatch(unloadPost());\r\n    };\r\n*/\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport ReqListContainer from '../containers/admin/ReqListContainer';\r\n\r\nconst AdminPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <ReqListContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: flex;\r\n  width: 100%;\r\n  z-index: 6;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.7rem;\r\n    font-weight: 750;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst MainMenu = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            YXMPORTFOLIO\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user.username}</UserInfo>\r\n              <Button onClick={onLogout}>로그아웃</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainMenu;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainPages = styled.div`\r\n.bg{\r\n  position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: linear-gradient(\r\n        to right,\r\n        rgba(20, 20, 20, 0.1) 10%,\r\n        rgba(20, 20, 20, 0.7) 70%,\r\n        rgba(20, 20, 20, 1)\r\n      ),\r\n      url(https://source.unsplash.com/random/1920x1080);\r\n    background-size: cover;\r\n    z-index: 3;\r\n  }\r\n  .total{\r\n    display: flex;\r\n    align-items:center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  .menu{\r\n    list-style:none;\r\n    text-align: center;\r\n    color: white;\r\n    -webkit-text-stroke: 1px black;\r\n    font-size: 1.5rem;\r\n    border: 1px solid #f5f5f5;\r\n    width: 16rem;\r\n    height: 6rem;\r\n    padding: 2rem;\r\n    margin: 3rem;\r\n    z-index: 4;\r\n  }\r\n`;\r\n\r\nexport const MainPage = () => {\r\n  return(\r\n    <>\r\n      <MainPages>\r\n        <div className = \"bg\">\r\n          <ol className = \"total\">\r\n            <li className = \"menu\"><Link to =  \"/\">포스트</Link></li>\r\n            <li className = \"menu\"><Link to = '/@admin/'>공지사항</Link></li>\r\n            <li className = \"menu\"><Link to =  \"/home\">사이트</Link></li>\r\n          </ol>\r\n        </div>\r\n      </MainPages>\r\n    </>\r\n  )\r\n};\r\n","import React from 'react';\r\nimport MainMenu from '../components/common/MainMenu';\r\nimport {MainPage} from '../components/common/MainPage'\r\n\r\nconst MainPages = () => {\r\n  return (\r\n      \r\n    <MainPage>\r\n        <MainMenu />\r\n    </MainPage>\r\n    \r\n  );\r\n};\r\n\r\nexport default MainPages;\r\n","import { Route } from 'react-router-dom';\r\nimport PostListPage from './pages/PostListPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport WritePage from './pages/WritePage';\r\nimport PostPage from './pages/PostPage';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport AdminPage from './pages/AdminPage';\r\nimport MainPages from './pages/MainPage';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>REACTERS</title>\r\n      </Helmet>\r\n      <Route component={MainPages} path=\"/home\" />\r\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\r\n      <Route component={LoginPage} path=\"/login\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={WritePage} path=\"/write\" />\r\n      <Route component={PostPage} path=\"/@:username/:postId\" />\r\n      <Route component={AdminPage} path=\"/admin\" />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}